import vk_api
import asyncio
import time
from typing import List, Optional
from config import Config

class VKSender:
    def __init__(self):
        self.vk_session = None
        self.vk = None
        self._init_vk()
    
    def _init_vk(self):
        try:
            if not Config.VK_TOKEN:
                raise ValueError("VK_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
            self.vk_session = vk_api.VkApi(token=Config.VK_TOKEN)
            self.vk = self.vk_session.get_api()
    
            try:
                user_info = self.vk.users.get()[0]
                print(f"‚úÖ VK API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['first_name']} {user_info['last_name']})")
            except:
                try:
                    group_info = self.vk.groups.getById()[0]
                    print(f"‚úÖ VK API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–≥—Ä—É–ø–ø–∞: {group_info['name']})")
                except:
                    print("‚úÖ VK API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK API: {e}")
            raise
    
    def get_user_chats(self):
        try:
            dialogs = self.vk.messages.getDialogs(count=200)
            chats = []
            
            for item in dialogs['items']:
                if 'chat_id' in item['message']:
                    chat_id = item['message']['chat_id']
                    chat_title = item['message']['title'] if 'title' in item['message'] else f"–ë–µ—Å–µ–¥–∞ {chat_id}"
                    chats.append({
                        'id': chat_id,
                        'title': chat_title
                    })
            
            return chats
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥: {e}")
            return []
    
    def send_message_to_chat(self, chat_id: int, message: str, retries: int = 0) -> bool:
        try:
            try:
                result = self.vk.messages.send(
                    chat_id=chat_id,
                    message=message,
                    random_id=0
                )
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ VK –±–µ—Å–µ–¥—É {chat_id} (—Å–ø–æ—Å–æ–± 1)")
                return True
            except Exception as e1:
                print(f"‚ö†Ô∏è –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e1}")
                
                peer_id = 2000000000 + chat_id
                result = self.vk.messages.send(
                    peer_id=peer_id,
                    message=message,
                    random_id=0
                )
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ VK –±–µ—Å–µ–¥—É {chat_id} (—Å–ø–æ—Å–æ–± 2, peer_id: {peer_id})")
                return True
                
        except Exception as e:
            if retries < Config.MAX_RETRIES:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {retries + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è VK –±–µ—Å–µ–¥—ã {chat_id}: {e}")
                time.sleep(2)
                return self.send_message_to_chat(chat_id, message, retries + 1)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK –±–µ—Å–µ–¥—É {chat_id}: {e}")
                return False
    
    def send_message_to_user(self, user_id: int, message: str, retries: int = 0) -> bool:
        try:
            result = self.vk.messages.send(
                user_id=user_id,
                message=message,
                random_id=0
            )
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VK {user_id}")
            return True
        except Exception as e:
            if retries < Config.MAX_RETRIES:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {retries + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK {user_id}: {e}")
                time.sleep(2)
                return self.send_message_to_user(user_id, message, retries + 1)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VK {user_id}: {e}")
                return False
    
    def send_broadcast(self, message: str, chat_ids: Optional[List[int]] = None) -> dict:
        if chat_ids is None:
            chat_ids = Config.VK_CHAT_IDS
        
        if not chat_ids:
            print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ ID –±–µ—Å–µ–¥ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø—É—Å—Ç")
            return {"success": 0, "failed": 0, "total": 0}
        
        success_count = 0
        failed_count = 0
        
        print(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ {len(chat_ids)} –±–µ—Å–µ–¥ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ...")
        
        for chat_id in chat_ids:
            if self.send_message_to_chat(chat_id, message):
                success_count += 1
            else:
                failed_count += 1
            time.sleep(Config.MESSAGE_DELAY)
        
        result = {
            "success": success_count,
            "failed": failed_count,
            "total": len(chat_ids)
        }
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ VK: {success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –Ω–µ—É–¥–∞—á–Ω–æ")
        return result 